// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.14.0
// source: producer/producer.proto

package producer

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GRPCProducerClient is the client API for GRPCProducer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GRPCProducerClient interface {
	Produce(ctx context.Context, in *KafkaMessage, opts ...grpc.CallOption) (*ProducerAck, error)
}

type gRPCProducerClient struct {
	cc grpc.ClientConnInterface
}

func NewGRPCProducerClient(cc grpc.ClientConnInterface) GRPCProducerClient {
	return &gRPCProducerClient{cc}
}

func (c *gRPCProducerClient) Produce(ctx context.Context, in *KafkaMessage, opts ...grpc.CallOption) (*ProducerAck, error) {
	out := new(ProducerAck)
	err := c.cc.Invoke(ctx, "/grpcproducer.GRPCProducer/Produce", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GRPCProducerServer is the server API for GRPCProducer service.
// All implementations must embed UnimplementedGRPCProducerServer
// for forward compatibility
type GRPCProducerServer interface {
	Produce(context.Context, *KafkaMessage) (*ProducerAck, error)
	mustEmbedUnimplementedGRPCProducerServer()
}

// UnimplementedGRPCProducerServer must be embedded to have forward compatible implementations.
type UnimplementedGRPCProducerServer struct {
}

func (UnimplementedGRPCProducerServer) Produce(context.Context, *KafkaMessage) (*ProducerAck, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Produce not implemented")
}
func (UnimplementedGRPCProducerServer) mustEmbedUnimplementedGRPCProducerServer() {}

// UnsafeGRPCProducerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GRPCProducerServer will
// result in compilation errors.
type UnsafeGRPCProducerServer interface {
	mustEmbedUnimplementedGRPCProducerServer()
}

func RegisterGRPCProducerServer(s grpc.ServiceRegistrar, srv GRPCProducerServer) {
	s.RegisterService(&GRPCProducer_ServiceDesc, srv)
}

func _GRPCProducer_Produce_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KafkaMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GRPCProducerServer).Produce(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpcproducer.GRPCProducer/Produce",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GRPCProducerServer).Produce(ctx, req.(*KafkaMessage))
	}
	return interceptor(ctx, in, info, handler)
}

// GRPCProducer_ServiceDesc is the grpc.ServiceDesc for GRPCProducer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GRPCProducer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpcproducer.GRPCProducer",
	HandlerType: (*GRPCProducerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Produce",
			Handler:    _GRPCProducer_Produce_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "producer/producer.proto",
}
